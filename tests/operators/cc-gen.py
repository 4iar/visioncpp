# This file is part of VisionCpp, a lightweight C++ template library
# for computer vision and image processing.
#
# Copyright (C) 2016 Codeplay Software Limited. All Rights Reserved.
#
# Contact: visioncpp@codeplay.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
from string import Template
from argparse import ArgumentParser
import sys
import os.path

def main():
    parser = ArgumentParser()
    parser.add_argument('--builddir', nargs=1)
    parser.add_argument('--testdir', nargs=1)
    args, leftover = parser.parse_known_args(sys.argv[1:])

    autogenwarning = "// THIS FILE IS AUTO-GENERATED BY tests/operators/cc-gen.py \n"

    # open the template
    templatein = open( 'cc.template' )
    # read it
    templatesrc = Template( templatein.read() )

    # define targets
    targets = [ "cpu", "gpu" ]
    storages = [ "Buffer2D" ]
    executions = [ "Fuse", "NoFuse" ]

    # walk through each folder
    for root, dirs, files in os.walk(".", topdown=False):
      # for each folder
      for name in dirs:
        # for each target
        for target in targets:
          # for each storage
          for storage in storages:
            # for each execution policy
            for execution in executions:
                d={ 'test_name':name, 'test_target':target,
                'test_storage': storage, 'test_execution':execution,
                'test_dir' : args.testdir[0] }
                # replace
                result = templatesrc.substitute(d)
                s = [args.builddir[0],'autogen/'+ name +'/'+ name.upper()+'_'+storage.upper()+'_'+ target.upper() +'_'+execution.upper()+'.cpp']
                path = os.path.join('',*s)
                print(path)
                os.makedirs(os.path.dirname(path), exist_ok=True)
                # write file
                with open(path, 'w') as file_:
                  file_.write(autogenwarning + result)

if __name__ == '__main__':
  sys.exit(main())
